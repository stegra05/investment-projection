# Environment configuration file for the Flask backend
# Copy this file to .env and fill in your actual values.
# Do NOT commit your .env file to version control.

# --- Application Environment ---
# Determines which configuration class is loaded from config.py (development, production, testing)
# Valid values: development, production, testing
FLASK_ENV=development

# --- Security Keys ---
# Generate strong, random keys for these.
# You can use Python's secrets module: python -c 'import secrets; print(secrets.token_hex(32))'
SECRET_KEY=your_flask_secret_key_here
JWT_SECRET_KEY=your_jwt_secret_key_here_should_be_different_from_secret_key

# --- Database Configuration ---
# Production Database URL (PostgreSQL example with SSL)
# For production, ensure you use SSL/TLS. For PostgreSQL, this often means adding ?sslmode=require
# DATABASE_URL=postgresql://user:password@host:port/dbname?sslmode=require

# Development Database URL (PostgreSQL example, local)
DEV_DATABASE_URL=postgresql://your_db_user:your_db_password@localhost:5432/investment_projection_dev

# Testing Database URL (Defaults to SQLite in-memory in config.py if not set)
# TEST_DATABASE_URL=sqlite:///:memory:
# Or for PostgreSQL:
# TEST_DATABASE_URL=postgresql://your_test_db_user:your_test_db_password@localhost:5432/investment_projection_test

# --- Celery Configuration (using Redis) ---
# Celery Broker URL
# For local development (unencrypted Redis):
CELERY_BROKER_URL=redis://localhost:6379/0
# For production (Redis with SSL/TLS - rediss://):
# CELERY_BROKER_URL=rediss://:your_redis_password@your_redis_host:6379/0

# Celery Result Backend URL
# For local development (unencrypted Redis):
CELERY_RESULT_BACKEND=redis://localhost:6379/0
# For production (Redis with SSL/TLS - rediss://):
# CELERY_RESULT_BACKEND=rediss://:your_redis_password@your_redis_host:6379/0

# --- Other Service URLs (if any) ---
# Example:
# THIRD_PARTY_API_KEY=your_api_key_here

# --- CORS Configuration ---
# Comma-separated list of allowed origins for CORS.
# Example for multiple origins: CORS_ALLOWED_ORIGINS=http://localhost:3000,https://your-production-frontend.com
CORS_ALLOWED_ORIGINS=http://localhost:3000