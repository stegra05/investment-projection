.list {
    list-style: none;
    padding: 0;
    margin-top: var(--space-m);
}

.listItem {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: var(--space-m);
    border: 1px solid var(--color-border); /* Use theme-aware var */
    border-radius: 6px; /* Consistent radius */
    margin-bottom: var(--space-s);
    background: var(--color-ui-background); /* Use theme-aware var */
    gap: var(--space-m); /* Add gap between info and actions */
}

/* Add hover effect for list items */
.listItem:hover {
  background-color: rgba(var(--color-primary-rgb), 0.05); /* Assuming --color-primary-rgb is defined */
  /* Or define a specific hover background color variable */
}

/* NEW: Container for details + allocation slider */
.assetInfo {
    flex-grow: 1; /* Take up available space */
    display: flex;
    justify-content: flex-start;
    align-items: flex-start;
    gap: var(--space-l); /* Add gap between details and slider */
}

.assetDetails {
    display: flex;
    flex-direction: column;
    gap: var(--space-xxs);
    flex-shrink: 0; /* Prevent details from shrinking too much */
}

.assetName {
    font-weight: 600; /* Semi-bold */
    font-size: 1rem;
    color: var(--color-text-primary); /* Use theme-aware var */
}

.assetType {
    font-size: 0.875rem;
    color: var(--color-text-secondary); /* Use theme-aware var */
}

/* Allocation display removed from here, now in allocationControl */
/* .allocation { ... } */

.expectedReturn {
    font-size: 0.875rem;
    color: var(--color-text-secondary); /* Use theme-aware var */
    font-variant-numeric: tabular-nums;
}

/* NEW: Styles for Allocation Slider Area */
.allocationControl {
    display: flex;
    align-items: center;
    gap: var(--space-s); /* Add space between label, slider, and input */
    /* Optional: Add some margin if needed */
    /* margin-left: var(--space-m); */
}

.allocationLabel {
    font-size: 0.875rem;
    color: var(--color-text-secondary);
    font-variant-numeric: tabular-nums; /* Keep numbers aligned */
    white-space: nowrap; /* Prevent label text wrapping */
    min-width: 120px; /* Ensure label area has consistent width */
    text-align: right;
    margin-right: var(--space-xs);
}

.allocationSlider {
    flex-grow: 1; /* Allow slider to take up most space */
    max-width: 300px; /* Optional: Prevent slider from becoming too wide */
    min-width: 100px; /* Add min-width to prevent collapsing */
    cursor: pointer;
    height: 8px; /* Adjust height */
    background: var(--color-border-dark); /* Assuming dark mode var exists and contrasts */
    border-radius: 4px;
    appearance: none; /* Override default look */
    width: 100%;
    outline: none;
}

/* Slider Thumb (Chrome/Safari/Edge) */
.allocationSlider::-webkit-slider-thumb {
    appearance: none;
    width: 16px;
    height: 16px;
    background: var(--color-primary); /* Thumb color */
    border-radius: 50%; /* Make it round */
    cursor: pointer;
}

/* Slider Thumb (Firefox) */
.allocationSlider::-moz-range-thumb {
    width: 16px;
    height: 16px;
    background: var(--color-primary);
    border-radius: 50%;
    cursor: pointer;
    border: none; /* Reset default border */
}

/* Styling for disabled state */
.allocationSlider:disabled {
    cursor: not-allowed;
    opacity: 0.6;
}
.allocationSlider:disabled::-webkit-slider-thumb {
    background: var(--color-text-secondary);
}
.allocationSlider:disabled::-moz-range-thumb {
    background: var(--color-text-secondary);
}

.allocationInput {
    width: 80px; /* Fixed width for the number input */
    padding: var(--space-xs) var(--space-s); /* Match input padding */
    border: 1px solid var(--color-border-light);
    border-radius: 6px; /* Match input border-radius */
    background-color: var(--color-ui-background-light); /* Match input background */
    color: var(--color-text-primary-light);
    font-size: 0.9rem; /* Slightly smaller font maybe */
    text-align: right;
}

.allocationInput:focus {
    outline: none;
    border-color: var(--color-primary);
    box-shadow: 0 0 0 2px rgba(var(--color-primary-rgb), 0.2); /* Needs --color-primary-rgb defined */
}

.allocationInput::-webkit-outer-spin-button,
.allocationInput::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0; /* Remove spinner buttons for cleaner look */
}

.allocationInput[type=number] {
    -moz-appearance: textfield; /* Firefox - remove spinner */
}

.actions {
    display: flex;
    align-items: center;
    gap: var(--space-s);
}

.actionButton {
    background: none;
    border: none;
    padding: var(--space-xs);
    cursor: pointer;
    color: var(--color-text-secondary-light);
    transition: color 0.2s ease-in-out;
}

.actionButton:disabled {
    color: var(--color-border-light); /* More muted */
    cursor: not-allowed;
    opacity: 0.6;
}

.actionButton:hover:not(:disabled) {
    color: var(--color-primary);
}

.icon {
    width: 1.25rem; /* 20px */
    height: 1.25rem;
}

.iconEdit:hover {
    /* Specific hover color if needed */
}

.iconDelete:hover {
    color: var(--color-error-light); /* Make delete hover red */
}

.noItemsText {
    text-align: center;
    padding: var(--space-l);
    color: var(--color-text-secondary-light);
} 