# Task Dependency Map

This map shows the dependencies between the sub-tasks identified in the
Work Breakdown Structure (WBS). Tasks must be completed in a logical
order.

-   **1.1. Initialize Git repository locally and on GitHub** (Depends
    on: None)

-   **1.2. Create project directory structure** (Depends on: 1.1)

-   **1.3. Set up Python virtual environment (`venv`) for backend**
    (Depends on: 1.2)

-   **1.4. Set up Node.js environment (npm/yarn) for frontend** (Depends
    on: 1.2)

-   **1.5. Create initial README, LICENSE, .gitignore files** (Depends
    on: 1.1)

-   **2.1. Install Flask and essential extensions** (Depends on: 1.3)

-   **2.2. Create basic Flask application structure** (Depends on: 2.1)

-   **2.3. Configure environment variables** (Depends on: 2.2)

-   **2.4. Set up basic API routing structure** (Depends on: 2.2)

-   **3.1. Install and configure local PostgreSQL server** (Depends on:
    None - Can be done in parallel early)

-   **3.2. Create development database and user roles** (Depends on:
    3.1)

-   **3.3. Integrate Flask-SQLAlchemy and Flask-Migrate** (Depends on:
    2.2, 3.2)

-   **3.4. Define initial database models (e.g., User)** (Depends on:
    3.3)

-   **3.5. Generate and apply initial database migration** (Depends on:
    3.4)

-   **4.1. Finalize User database model** (Depends on: 3.5)

-   **4.2. Implement password hashing (using bcrypt)** (Depends on: 4.1)

-   **4.3. Create API endpoints for user registration** (Depends on:
    2.4, 4.2)

-   **4.4. Create API endpoints for user login** (Depends on: 2.4, 4.2)

-   **4.5. Create API endpoints for user logout** (Depends on: 2.4,
    4.4 - needs login mechanism)

-   **4.6. Implement password reset functionality** (Depends on: 4.3,
    4.4 - Often needs user context/email service)

-   **4.7. Add authorization checks** (Depends on: 4.4)

-   **5.1. Define Database Models (Portfolio, Asset,
    PlannedFutureChange)** (Depends on: 3.5)

-   **5.2. Generate and apply database migrations for new models**
    (Depends on: 5.1)

-   **5.3. Create API endpoints for Portfolio CRUD** (Depends on: 2.4,
    4.7, 5.2)

-   **5.4. Create API endpoints for managing Assets** (Depends on: 5.3)

-   **5.5. Create API endpoints for managing PlannedFutureChanges**
    (Depends on: 5.3)

-   **6.1. Research/define core projection calculation logic** (Depends
    on: Requirements understanding)

-   **6.2. Implement projection calculation function(s)** (Depends on:
    6.1)

-   **6.3. Integrate projection logic with data fetching** (Depends on:
    5.2, 6.2)

-   **6.4. Create API endpoint (`/projections`)** (Depends on: 2.4, 4.7,
    5.3, 6.3)

-   **6.5. Consider performance optimization** (Depends on: 6.4
    testing/profiling)

-   **7.1. Create React application** (Depends on: 1.4)

-   **7.2. Set up project structure** (Depends on: 7.1)

-   **7.3. Configure basic routing** (Depends on: 7.2)

-   **7.4. Set up basic styling approach** (Depends on: 7.2)

-   **8.1. Create Registration page/component UI** (Depends on: 7.3,
    7.4)

-   **8.2. Create Login page/component UI** (Depends on: 7.3, 7.4)

-   **8.3. Implement frontend logic for registration API call** (Depends
    on: 8.1, 11.1)

-   **8.4. Implement frontend logic for login API call** (Depends on:
    8.2, 11.1)

-   **8.5. Implement frontend logic for logout** (Depends on: 8.4)

-   **8.6. Set up protected routes** (Depends on: 7.3, 8.4)

-   **8.7. Implement UI for password reset flow** (Depends on: 8.1, 8.2)

-   **9.1. Create UI components for displaying portfolios** (Depends on:
    7.3, 7.4)

-   **9.2. Create UI form/component for creating/editing a portfolio**
    (Depends on: 9.1)

-   **9.3. Create UI components for managing assets** (Depends on: 9.2)

-   **9.4. Create UI components for managing planned changes** (Depends
    on: 9.2)

-   **9.5. Integrate UI components with backend Portfolio APIs**
    (Depends on: 9.1, 9.2, 9.3, 9.4, 11.1)

-   **10.1. Select and install a charting library** (Depends on: 7.1)

-   **10.2. Create UI component to trigger projection API call**
    (Depends on: 7.3, 7.4)

-   **10.3. Create UI component to display the projection graph**
    (Depends on: 10.1, 10.2)

-   **10.4. Handle loading and error states** (Depends on: 10.3)

-   **10.5. Integrate with projection API call logic** (Depends on:
    10.2, 10.3, 11.1)

-   **11.1. Set up mechanism for frontend API calls** (Depends on: 7.1)

-   **11.2. Configure CORS on Flask backend** (Depends on: 2.2)

-   **11.3. Ensure auth tokens are sent** (Depends on: 8.4, 11.1)

-   **11.4. Implement frontend error handling for API calls** (Depends
    on: 11.1)

-   **11.5. Connect all FE components to BE APIs** (Depends on:
    Completion of relevant FE components (8.x, 9.x, 10.x) and BE API
    endpoints (4.x, 5.x, 6.x), 11.1, 11.2, 11.3, 11.4)

-   **12.1. Configure Jest for React frontend** (Depends on: 7.1)

-   **12.2. Write sample Jest unit tests** (Depends on: Completion of
    components to test, 12.1)

-   **12.3. Configure Pytest for Flask backend** (Depends on: 2.1)

-   **12.4. Write sample Pytest unit tests** (Depends on: Completion of
    backend code to test, 12.3)
